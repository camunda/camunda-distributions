# Docker Compose file for Web Modeler Self-Managed. This file can be used stand-alone. It will install Web Modeler Dependencies:
# 1. identity
# 2. keycloak
# Note: this file is using Mailpit to simulate a mail server

services:

  web-modeler-db:
    container_name: web-modeler-db

    image: postgres:${POSTGRES_VERSION}
    healthcheck:
      test: pg_isready -d web-modeler-db -U web-modeler-db-user
      interval: 5s
      timeout: 15s
      retries: 30
    environment:
      POSTGRES_DB: web-modeler-db
      POSTGRES_USER: web-modeler-db-user
      POSTGRES_PASSWORD: web-modeler-db-password
    networks:
      - web-modeler
    volumes:
      - postgres-web:/var/lib/postgresql/data

  web-modeler-websockets:
    container_name: web-modeler-websockets
    image: camunda/web-modeler-websockets:${CAMUNDA_WEB_MODELER_VERSION}
    ports:
      - "8060:8060"
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://127.0.0.1:8060/up"]
      interval: 5s
      timeout: 15s
      retries: 30
    environment:
      APP_NAME: "Web Modeler Self-Managed WebSockets"
      APP_DEBUG: "true"
      PUSHER_APP_ID: web-modeler-app
      PUSHER_APP_KEY: web-modeler-app-key
      PUSHER_APP_SECRET: web-modeler-app-secret
    networks:
      - web-modeler

  mailpit:
    # If you want to use your own SMTP server, you can remove this container
    # and configure RESTAPI_MAIL_HOST, RESTAPI_MAIL_PORT, REST_API_MAIL_USER,
    # REST_API_MAIL_PASSWORD and RESTAPI_MAIL_ENABLE_TLS in web-modeler-restapi
    container_name: web-modeler-mailpit
    image: axllent/mailpit:${MAILPIT_VERSION}
    ports:
      - "1025:1025"
      - "8075:8025"
    healthcheck:
      test: /usr/bin/nc -v localhost 1025
      interval: 30s
    networks:
      - web-modeler

  # Modeler containers
  web-modeler-restapi:
    container_name: web-modeler-restapi
    image: camunda/web-modeler-restapi:${CAMUNDA_WEB_MODELER_VERSION}
    depends_on:
      web-modeler-db:
        condition: service_healthy
      mailpit:
        condition: service_started
      identity:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8091/health/readiness"]
      interval: 5s
      timeout: 15s
      retries: 30
    environment:
      JAVA_OPTIONS: -Xmx512m
      LOGGING_LEVEL_IO_CAMUNDA_MODELER: DEBUG
      CAMUNDA_IDENTITY_BASEURL: http://identity:8084/
      SPRING_DATASOURCE_URL: jdbc:postgresql://web-modeler-db:5432/web-modeler-db
      SPRING_DATASOURCE_USERNAME: web-modeler-db-user
      SPRING_DATASOURCE_PASSWORD: web-modeler-db-password
      SPRING_PROFILES_INCLUDE: default-logging
      RESTAPI_PUSHER_HOST: web-modeler-websockets
      RESTAPI_PUSHER_PORT: "8060"
      RESTAPI_PUSHER_APP_ID: web-modeler-app
      RESTAPI_PUSHER_KEY: web-modeler-app-key
      RESTAPI_PUSHER_SECRET: web-modeler-app-secret
      RESTAPI_OAUTH2_TOKEN_ISSUER: http://${HOST}:18080/auth/realms/camunda-platform
      RESTAPI_OAUTH2_TOKEN_ISSUER_BACKEND_URL: http://${KEYCLOAK_HOST}:18080/auth/realms/camunda-platform
      RESTAPI_SERVER_URL: http://localhost:8070
      RESTAPI_MAIL_HOST: mailpit
      RESTAPI_MAIL_PORT: 1025
      RESTAPI_MAIL_ENABLE_TLS: "false"
      RESTAPI_MAIL_FROM_ADDRESS: "noreply@example.com"
      CAMUNDA_MODELER_CLUSTERS_0_ID: "local-orchestration"
      CAMUNDA_MODELER_CLUSTERS_0_NAME: "Local Orchestration instance"
      CAMUNDA_MODELER_CLUSTERS_0_VERSION: ${CAMUNDA_VERSION}
      CAMUNDA_MODELER_CLUSTERS_0_URL_GRPC: grpc://orchestration:26500
      CAMUNDA_MODELER_CLUSTERS_0_URL_REST: http://orchestration:8080
      CAMUNDA_MODELER_CLUSTERS_0_URL_WEBAPP: http://localhost:8088
      CAMUNDA_MODELER_CLUSTERS_0_AUTHENTICATION: CLIENT_CREDENTIALS
      CAMUNDA_MODELER_CLUSTERS_0_AUTHORIZATIONS_ENABLED: ${RESOURCE_AUTHORIZATIONS_ENABLED}
      CAMUNDA_MODELER_CLUSTERS_0_OAUTH_URL: http://keycloak:18080/auth/realms/camunda-platform/protocol/openid-connect/token
      CAMUNDA_MODELER_CLUSTERS_0_OAUTH_CLIENT_ID: ${ORCHESTRATION_CLIENT_ID}
      CAMUNDA_MODELER_CLUSTERS_0_OAUTH_CLIENT_SECRET: ${ORCHESTRATION_CLIENT_SECRET}
      CAMUNDA_MODELER_CLUSTERS_0_OAUTH_AUDIENCES_0: orchestration-api
    networks:
      - web-modeler
      - camunda-platform

  web-modeler-webapp:
    container_name: web-modeler-webapp
    image: camunda/web-modeler-webapp:${CAMUNDA_WEB_MODELER_VERSION}
    ports:
      - "8070:8070"
    depends_on:
      web-modeler-restapi:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8071/health/readiness"]
      interval: 5s
      timeout: 15s
      retries: 30
    environment:
      RESTAPI_HOST: web-modeler-restapi
      SERVER_HTTPS_ONLY: "false"
      SERVER_URL: http://localhost:8070
      PUSHER_APP_ID: web-modeler-app
      PUSHER_KEY: web-modeler-app-key
      PUSHER_SECRET: web-modeler-app-secret
      PUSHER_HOST: web-modeler-websockets
      PUSHER_PORT: "8060"
      CLIENT_PUSHER_HOST: localhost
      CLIENT_PUSHER_PORT: "8060"
      CLIENT_PUSHER_FORCE_TLS: "false"
      CLIENT_PUSHER_KEY: web-modeler-app-key
      OAUTH2_CLIENT_ID: web-modeler
      OAUTH2_JWKS_URL: http://${KEYCLOAK_HOST}:18080/auth/realms/camunda-platform/protocol/openid-connect/certs
      OAUTH2_TOKEN_AUDIENCE: web-modeler
      OAUTH2_TOKEN_ISSUER: http://${HOST}:18080/auth/realms/camunda-platform
      IDENTITY_BASE_URL: http://identity:8084/
      PLAY_ENABLED: "true"
    networks:
      - web-modeler
      - camunda-platform

  ## Dependencies: identity, keycloak, postgres for keycloak
  identity: # https://docs.camunda.io/docs/self-managed/platform-deployment/docker/#identity
    container_name: identity
    image: camunda/identity:${CAMUNDA_IDENTITY_VERSION}
    ports:
      - "8084:8084"
    environment: # https://docs.camunda.io/docs/self-managed/identity/deployment/configuration-variables/
      SERVER_PORT: 8084
      IDENTITY_RETRY_DELAY_SECONDS: 30
      IDENTITY_URL: http://${HOST}:8084
      KEYCLOAK_URL: http://keycloak:18080/auth
      IDENTITY_AUTH_PROVIDER_ISSUER_URL: http://${HOST}:18080/auth/realms/camunda-platform
      IDENTITY_AUTH_PROVIDER_BACKEND_URL: http://${KEYCLOAK_HOST}:18080/auth/realms/camunda-platform
      IDENTITY_DATABASE_HOST: postgres
      IDENTITY_DATABASE_PORT: 5432
      IDENTITY_DATABASE_NAME: bitnami_keycloak
      IDENTITY_DATABASE_USERNAME: bn_keycloak
      IDENTITY_DATABASE_PASSWORD: "demo-postgres-password"
      # Keycloak user initialization
      KEYCLOAK_USERS_0_USERNAME: "demo"
      KEYCLOAK_USERS_0_PASSWORD: "demo"
      KEYCLOAK_USERS_0_FIRST_NAME: "Demo"
      KEYCLOAK_USERS_0_EMAIL: "demo@example.com"
      KEYCLOAK_USERS_0_ROLES_0: "Web Modeler"
      KEYCLOAK_USERS_0_ROLES_1: "Web Modeler Admin"
      # Web Modeler client configuration
      IDENTITY_COMPONENT_PRESETS_WEBMODELER_APPLICATIONS_0_NAME: "Web Modeler"
      IDENTITY_COMPONENT_PRESETS_WEBMODELER_APPLICATIONS_0_ID: "web-modeler"
      IDENTITY_COMPONENT_PRESETS_WEBMODELER_APPLICATIONS_0_TYPE: "public"
      IDENTITY_COMPONENT_PRESETS_WEBMODELER_APPLICATIONS_0_ROOT_URL: "http://${HOST}:8070"
      IDENTITY_COMPONENT_PRESETS_WEBMODELER_APPLICATIONS_0_REDIRECT_URIS_0: "/login-callback"
      IDENTITY_COMPONENT_PRESETS_WEBMODELER_APIS_0_NAME: "Web Modeler Internal API"
      IDENTITY_COMPONENT_PRESETS_WEBMODELER_APIS_0_AUDIENCE: "web-modeler-api"
      IDENTITY_COMPONENT_PRESETS_WEBMODELER_APIS_0_PERMISSIONS_0_DEFINITION: "write:*"
      IDENTITY_COMPONENT_PRESETS_WEBMODELER_APIS_0_PERMISSIONS_0_DESCRIPTION: "Write permission"
      # Orchestration client (for Web Modeler to deploy to orchestration if available)
      KEYCLOAK_CLIENTS_0_NAME: "orchestration"
      KEYCLOAK_CLIENTS_0_ID: ${ORCHESTRATION_CLIENT_ID}
      KEYCLOAK_CLIENTS_0_SECRET: ${ORCHESTRATION_CLIENT_SECRET}
      KEYCLOAK_CLIENTS_0_TYPE: "M2M"
      RESOURCE_PERMISSIONS_ENABLED: ${RESOURCE_AUTHORIZATIONS_ENABLED}
    healthcheck:
      test: ["CMD", "wget", "-q", "--tries=1", "--spider", "http://localhost:8082/actuator/health"]
      interval: 5s
      timeout: 15s
      retries: 30
      start_period: 60s
    restart: on-failure
    volumes:
      - keycloak-theme:/app/keycloak-theme
    networks:
      - camunda-platform
      - identity-network
    depends_on:
      keycloak:
        condition: service_healthy

  postgres: # https://hub.docker.com/_/postgres
    container_name: postgres
    image: postgres:${POSTGRES_VERSION}
    environment:
      POSTGRES_DB: bitnami_keycloak
      POSTGRES_USER: bn_keycloak
      POSTGRES_PASSWORD: "demo-postgres-password"
    restart: on-failure
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - postgres:/var/lib/postgresql/data
    networks:
      - identity-network

  keycloak: # https://hub.docker.com/r/bitnamilegacy/keycloak
    container_name: keycloak
    image: bitnamilegacy/keycloak:${KEYCLOAK_SERVER_VERSION}
    volumes:
      - keycloak-theme:/opt/bitnami/keycloak/themes/identity
    ports:
      - "18080:18080"
    environment:
      KEYCLOAK_HTTP_PORT: 18080
      KEYCLOAK_HTTP_RELATIVE_PATH: /auth
      KEYCLOAK_DATABASE_HOST: postgres
      KEYCLOAK_DATABASE_PASSWORD: "demo-postgres-password"
      KEYCLOAK_ADMIN_USER: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    restart: on-failure
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:18080/auth"]
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 30s
    networks:
      - camunda-platform
      - identity-network
    depends_on:
      - postgres

networks:
  camunda-platform:
  identity-network:
  web-modeler:

volumes:
  postgres:
  postgres-web:
  keycloak-theme:
